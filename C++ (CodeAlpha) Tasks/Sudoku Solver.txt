#include <iostream>
#include <vector>
const int N = 9;
void printGrid(const std::vector<std::vector<int>>&grid)
{
   for(int i=0;i<N;++i)
   {
      for(int j=0;j<N;++j)
      {
         std::cout<<grid[i][j]<<"";
      }
      std::cout<<std::endl;
   }
}
bool isSafe(const std::vector<std::vector<int>>&grid,int row, int col, int num)
{
   for(int i=0;i<N;++i)
   {
      if(grid[row][i] == num)
      {
         return false;
      }
   }
   for(int i=0;i<N,++i)
   {
      if(grid[i][col] == num)
      {
         return false;
      }
   }
   int startRow = row - row % 3;
   int startCol = col - col % 3;
   for(int i=0;i<3;i++)
   {
      for(int j=0;j<3;++j)
      {
         if(grid[i + startRow][j + startCol] == num)
         {
            return false;
         }
      }
   }
   return true;
}
book solveSudoku(std::vector<std::vector<int>>&grid)
{
   int row,col;
   bool found = false;
   for(row=0;row<N;++row)
   {
      for(col=0;col<N;++col)
      {
         if(grid[row][col] == 0
         {
            found = true;
            break;
         }
      }
      if(found)
      {
         break;
      }
   }
   if(!found)
   {
      return true;
   }
   for(int num = 1; num <= 9;++num)
   {
      if(isSafe(grid,row,col,num))
      {
         grid[row][col] = num;
         if(solveSudoku(grid))
         {
            return true;
         }
         grid[row[col] = 0;
      }
   }
   return false;
}
int main()
{
   std::vector<std::vector<int>>grid = {
      {5, 3, 0, 0, 7, 0, 0, 0, 0},
      {6, 0, 0, 1, 9, 5, 0, 0, 0},
      {0, 9, 8, 0, 0, 0, 0, 0, 6},
      {8, 0, 0, 0, 6, 0, 0, 0, 3},
      {4, 0, 0, 8, 0, 3, 0, 0, 1},
      {7, 0, 0, 0, 2, 0, 0, 0, 6},
      {0, 6, 0, 0, 0, 0, 2, 8, 0},
      {0, 0, 0, 4, 1, 9, 0, 0, 5},
      {0, 0, 0, 0, 8, 0, 0, 7, 9}
   };
   if(solveSudoku(grid))
   {
      std::cout<<"Sudoku solved successfully:\n";
      printGrid(grid);
   }
   else
   {
      std::cout<<"No solution exits for the Sudoku.\n";
   }
   return 0;
}